#include <string.h>
#include <math.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

int toInteger(char c) {
    if (c >= '0' && c <= '9') return c - '0';
    if (c >= 'A' && c <= 'Z') return c - 'A' + 10;
    if (c >= 'a' && c <= 'z') return c - 'a' + 10;
    return -1;
}

char toCharacter(int n) {
    if (n >= 0 && n <= 9) return n + '0';
    if (n >= 10 && n < 36) return n - 10 + 'A';
    return '{?}';
}

bool Valid(const char* number, int base) {
    int length = strlen(number);
    for (int i = 0; i < length; i++) {
        if (number[i] == '.') continue;
        if (toInteger(number[i]) >= base || toInteger(number[i]) == -1) {
            return false;
        }
    }
    return true;
}

double cTod(const char* number, int base) {
    double result = 0.0;
    int length = strlen(number);
    int pointIndex = length; // If no point, assume it's at the end
    bool pointSeen = false;

    // Find the index of the decimal point
    for (int i = 0; i < length; i++) {
        if (number[i] == '.') {
            pointIndex = i;
            pointSeen = true;
            break;
        }
    }

    // Convert integer part to decimal
    for (int i = 0; i < pointIndex; i++) {
        result = result * base + toInteger(number[i]);
    }

    // Convert fractional part to decimal
    if (pointSeen) {
        double fractionalValue = 0.0;
        double basePower = 1.0 / base;
        for (int i = pointIndex + 1; i < length; i++) {
            fractionalValue += toInteger(number[i]) * basePower;
            basePower /= base;
        }
        result += fractionalValue;
    }

    return result;
}

void cFromd(double n, int base, char* result) {
    char temp[65];
    int it = 0;
    long long integerPart = (long long)n;
    double fractionalPart = n - integerPart;

    if (integerPart == 0) {
        temp[it++] = '0';
    } else {
        while (integerPart > 0) {
            temp[it++] = toCharacter(integerPart % base);
            integerPart /= base;
        }
    }

    for (int i = 0; i < it; i++) {
        result[i] = temp[it - i - 1];
    }
    result[it] = '\0';

    if (fractionalPart > 0) {
        strcat(result, ".");
        int tempIndex = strlen(result);
        int maxFractionDigits = 10; // Limit the precision of fractional part

        while (fractionalPart > 0 && maxFractionDigits-- > 0) {
            fractionalPart *= base;
            int fractionalDigit = (int)fractionalPart;
            result[tempIndex++] = toCharacter(fractionalDigit);
            fractionalPart -= fractionalDigit;
        }
        result[tempIndex] = '\0';
    }
}

bool ValidFractional(const char* number, int base) {
    int length = strlen(number);
    bool pointSeen = false;
    for (int i = 0; i < length; i++) {
        if (number[i] == '.') {
            if (pointSeen) return false;
            pointSeen = true;
            continue;
        }
        if (toInteger(number[i]) >= base || toInteger(number[i]) == -1) {
            return false;
        }
    }
    return true;
}

void header() {
    printf("|======================================================================|\n\n");
    printf("|                 WELCOME TO NUMBER BASE SYSTEM CONVERTER              |\n\n");
    printf("|======================================================================|\n\n");
    return;
}

void printResult(int n2, char* num2) {
    printf("======================================================================\n");
    printf("The Number in base %d is: %s\n", n2, num2);
    printf("======================================================================\n");
}

void Menu() {
    printf("|                           Select the Option:                         |\n\n");
    printf("|======================================================================|\n\n");
    printf("| 1. Decimal                                                           |\n");
    printf("| 2. Binary                                                            |\n");
    printf("| 3. Octal                                                             |\n");
    printf("| 4. Hexadecimal                                                       |\n");
    printf("| 5. Other base                                                        |\n");
    printf("======================================================================\n\n");
    printf("| Enter your option:");
}

int main() {
    int n1, n2, n3; // n1 for input option, n2 for output base, n3 for input base
    char num[65];
    char num2[65];
    double temp;
    header();

    while (1) {
        Menu();
        scanf("%d", &n1);
        printf("|======================================================================|\n\n");

        switch (n1) {
            case 1:
                n3 = 10;
                break;
            case 2:
                n3 = 2;
                break;
            case 3:
                n3 = 8;
                break;
            case 4:
                n3 = 16;
                break;
            case 5:
                printf("Enter the base of the Number: ");
                scanf("%d", &n3);
                if (n3 > 36) {
                    printf("Base greater than 36 is not allowed as there will be no alphabet to represent the higher digits (press enter)\n");
                    printf("======================================================================\n");
                    getchar(); // consume newline
                    getchar(); // wait for enter
                    continue;
                }
                break;
            default:
                printf("Invalid option. Please try again.\n");
                continue;
        }

        printf("Enter the Number: ");
        scanf("%s", num);

        if (!ValidFractional(num, n3)) {
            printf("Invalid Number for the base %d. Please try again. (press enter)\n", n3);
            printf("======================================================================\n");
            getchar();
            getchar();
            continue;
        }

        printf("Enter the base to convert to: ");
        scanf("%d", &n2);
        if (n2 > 36) {
            printf("Base greater than 36 is not allowed as there will be no alphabet to represent the higher digits (press enter)\n");
            printf("======================================================================\n");
            getchar();
            getchar();
            continue;
        }

        temp = cTod(num, n3);
        cFromd(temp, n2, num2);

        printResult(n2, num2);

        printf("Do you want to convert another Number? (y/n): ");
        char c;
        scanf(" %c", &c);
        printf("======================================================================\n");
        if (c == 'n' || c == 'N') {
            break;
        }
    }

    return 0;
}
